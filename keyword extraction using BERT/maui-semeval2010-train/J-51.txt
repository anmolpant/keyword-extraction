Complexity of (Iterated) Dominance∗
Vincent Conitzer
Carnegie Mellon University
5000 Forbes Avenue
Pittsburgh, PA 15213, USA
conitzer@cs.cmu.edu
Tuomas Sandholm
Carnegie Mellon University
5000 Forbes Avenue
Pittsburgh, PA 15213, USA
sandholm@cs.cmu.edu
ABSTRACT
We study various computational aspects of solving games
using dominance and iterated dominance. We first study
both strict and weak dominance (not iterated), and show
that checking whether a given strategy is dominated by
some mixed strategy can be done in polynomial time using
a single linear program solve. We then move on to 
iterated dominance. We show that determining whether there
is some path that eliminates a given strategy is NP-complete
with iterated weak dominance. This allows us to also show
that determining whether there is a path that leads to a
unique solution is NP-complete. Both of these results hold
both with and without dominance by mixed strategies. (A
weaker version of the second result (only without dominance
by mixed strategies) was already known [7].) Iterated strict
dominance, on the other hand, is path-independent (both
with and without dominance by mixed strategies) and can
therefore be done in polynomial time.
We then study what happens when the dominating 
strategy is allowed to place positive probability on only a few
pure strategies. First, we show that finding the dominating
strategy with minimum support size is NP-complete (both
for strict and weak dominance). Then, we show that 
iterated strict dominance becomes path-dependent when there
is a limit on the support size of the dominating strategies,
and that deciding whether a given strategy can be 
eliminated by iterated strict dominance under this restriction is
NP-complete (even when the limit on the support size is 3).
Finally, we study Bayesian games. We show that, unlike in
normal form games, deciding whether a given pure strategy
is dominated by another pure strategy in a Bayesian game is
NP-complete (both with strict and weak dominance); 
however, deciding whether a strategy is dominated by some
mixed strategy can still be done in polynomial time with
a single linear program solve (both with strict and weak
∗
This material is based upon work supported by the 
National Science Foundation under ITR grants IIS-0121678
and IIS-0427858, and a Sloan Fellowship.
dominance). Finally, we show that iterated dominance 
using pure strategies can require an exponential number of
iterations in a Bayesian game (both with strict and weak
dominance).
Categories and Subject Descriptors
F.2 [Theory of Computation]: Analysis of Algorithms
and Problem Complexity; J.4 [Computer Applications]:
Social and Behavioral Sciences-Economics
General Terms
Algorithms, Economics, Theory
1. INTRODUCTION
In multiagent systems with self-interested agents, the 
optimal action for one agent may depend on the actions taken
by other agents. In such settings, the agents require tools
from game theory to rationally decide on an action. Game
theory offers various formal models of strategic settings-the
best-known of which is a game in normal (or matrix) form,
specifying a utility (payoff) for each agent for each 
combination of strategies that the agents choose-as well as 
solution concepts, which, given a game, specify which outcomes
are reasonable (under various assumptions of rationality and
common knowledge).
Probably the best-known (and certainly the most-studied)
solution concept is that of Nash equilibrium. A Nash 
equilibrium specifies a strategy for each player, in such a way that
no player has an incentive to (unilaterally) deviate from the
prescribed strategy. Recently, numerous papers have 
studied computing Nash equilibria in various settings [9, 4, 12,
3, 13, 14], and the complexity of constructing a Nash 
equilibrium in normal form games has been labeled one of the
two most important open problems on the boundary of P
today [20].
The problem of computing solutions according to the 
perhaps more elementary solution concepts of dominance and
iterated dominance has received much less attention. (After
an early short paper on an easy case [11], the main 
computational study of these concepts has actually taken place
in a paper in the game theory community [7].1
) A strategy
strictly dominates another strategy if it performs strictly
1
This is not to say that computer scientists have ignored
88
better against all vectors of opponent strategies, and weakly
dominates it if it performs at least as well against all vectors
of opponent strategies, and strictly better against at least
one. The idea is that dominated strategies can be eliminated
from consideration. In iterated dominance, the elimination
proceeds in rounds, and becomes easier as more strategies
are eliminated: in any given round, the dominating 
strategy no longer needs to perform better than or as well as the
dominated strategy against opponent strategies that were
eliminated in earlier rounds. Computing solutions 
according to (iterated) dominance is important for at least the
following reasons: 1) it can be computationally easier than
computing (for instance) a Nash equilibrium (and therefore
it can be useful as a preprocessing step in computing a Nash
equilibrium), and 2) (iterated) dominance requires a weaker
rationality assumption on the players than (for instance)
Nash equilibrium, and therefore solutions derived according
to it are more likely to occur.
In this paper, we study some fundamental computational
questions concerning dominance and iterated dominance, 
including how hard it is to check whether a given strategy can
be eliminated by each of the variants of these notions. The
rest of the paper is organized as follows. In Section 2, we
briefly review definitions and basic properties of normal form
games, strict and weak dominance, and iterated strict and
weak dominance. In the remaining sections, we study 
computational aspects of dominance and iterated dominance. In
Section 3, we study one-shot (not iterated) dominance. In
Section 4, we study iterated dominance. In Section 5, we
study dominance and iterated dominance when the 
dominating strategy can only place probability on a few pure
strategies. Finally, in Section 6, we study dominance and
iterated dominance in Bayesian games.
2. DEFINITIONS AND BASIC PROPERTIES
In this section, we briefly review normal form games, as
well as dominance and iterated dominance (both strict and
weak). An n-player normal form game is defined as follows.
Definition 1. A normal form game is given by a set of
players {1, 2, . . . , n}; and, for each player i, a (finite) set of
pure strategies Σi and a utility function ui : Σ1 × Σ2 × . . . ×
Σn → R (where ui(σ1, σ2, . . . , σn) denotes player i"s utility
when each player j plays action σj).
The two main notions of dominance are defined as follows.
Definition 2. Player i"s strategy σi is said to be strictly
dominated by player i"s strategy σi if for any vector of 
strategies σ−i for the other players, ui(σi, σ−i) > ui(σi, σ−i).
Player i"s strategy σi is said to be weakly dominated by
player i"s strategy σi if for any vector of strategies σ−i for the
other players, ui(σi, σ−i) ≥ ui(σi, σ−i), and for at least one
vector of strategies σ−i for the other players, ui(σi, σ−i) >
ui(σi, σ−i).
In this definition, it is sometimes allowed for the 
dominating strategy σi to be a mixed strategy, that is, a probability
distribution over pure strategies. In this case, the utilities in
dominance altogether. For example, simple dominance
checks are sometimes used as a subroutine in searching for
Nash equilibria [21].
the definition are the expected utilities.2
There are other 
notions of dominance, such as very weak dominance (in which
no strict inequality is required, so two strategies can 
dominate each other), but we will not study them here. When we
are looking at the dominance relations for player i, the other
players (−i) can be thought of as a single player.3

Therefore, in the rest of the paper, when we study one-shot (not
iterated) dominance, we will focus without loss of generality
on two-player games.4
In two-player games, we will 
generally refer to the players as r (row) and c (column) rather
than 1 and 2.
In iterated dominance, dominated strategies are removed
from the game, and no longer have any effect on future 
dominance relations. Iterated dominance can eliminate more
strategies than dominance, as follows. σr may originally
not dominate σr because the latter performs better against
σc; but then, once σc is removed because it is dominated by
σc, σr dominates σr, and the latter can be removed. For 
example, in the following game, R can be removed first, after
which D is dominated.
L R
U 1, 1 0, 0
D 0, 1 1, 0
Either strict or weak dominance can be used in the 
definition of iterated dominance. We note that the process of
iterated dominance is never helped by removing a dominated
mixed strategy, for the following reason. If σi gives player i
a higher utility than σi against mixed strategy σj for player
j = i (and strategies σ−{i,j} for the other players), then for
at least one pure strategy σj that σj places positive 
probability on, σi must perform better than σi against σj (and
strategies σ−{i,j} for the other players). Thus, removing the
mixed strategy σj does not introduce any new dominances.
More detailed discussions and examples can be found in
standard texts on microeconomics or game theory [17, 5].
We are now ready to move on to the core of this paper.
3. DOMINANCE (NOT ITERATED)
In this section, we study the notion of one-shot (not 
iterated) dominance. As a first observation, checking whether a
given strategy is strictly (weakly) dominated by some pure
strategy is straightforward, by checking, for every pure 
strategy for that player, whether the latter strategy performs
strictly better against all the opponent"s strategies (at least
as well against all the opponent"s strategies, and strictly
2
The dominated strategy σi is, of course, also allowed to be
mixed, but this has no technical implications for the paper:
when we study one-shot dominance, we ask whether a given
strategy is dominated, and it does not matter whether the
given strategy is pure or mixed; when we study iterated
dominance, there is no use in eliminating mixed strategies,
as we will see shortly.
3
This player may have a very large strategy space (one pure
strategy for every vector of pure strategies for the players
that are being replaced). Nevertheless, this will not result in
an increase in our representation size, because the original
representation already had to specify utilities for each of
these vectors.
4
We note that a restriction to two-player games would not
be without loss of generality for iterated dominance. This
is because for iterated dominance, we need to look at the
dominated strategies of each individual player, so we cannot
merge any players.
89
better against at least one).5
Next, we show that 
checking whether a given strategy is dominated by some mixed
strategy can be done in polynomial time by solving a single
linear program. (Similar linear programs have been given
before [18]; we present the result here for completeness, and
because we will build on the linear programs given below in
Theorem 6.)
Proposition 1. Given the row player"s utilities, a 
subset Dr of the row player"s pure strategies Σr, and a 
distinguished strategy σ∗
r for the row player, we can check in time
polynomial in the size of the game (by solving a single linear
program of polynomial size) whether there exists some mixed
strategy σr, that places positive probability only on strategies
in Dr and dominates σ∗
r , both for strict and for weak 
dominance.
Proof. Let pdr be the probability that σr places on dr ∈
Dr. We will solve a single linear program in each of our
algorithms; linear programs can be solved in polynomial
time [10]. For strict dominance, the question is whether the
pdr can be set so that for every pure strategy for the column
player σc ∈ Σc,
dr∈Dr
pdr ur(dr, σc) > ur(σ∗
r , σc). Because
the inequality must be strict, we cannot solve this directly
by linear programming. We proceed as follows. Because the
game is finite, we may assume without loss of generality that
all utilities are positive (if not, simply add a constant to all
utilities.) Solve the following linear program:
minimize
dr∈Dr
pdr
such that
for any σc ∈ Σc,
dr∈Dr
pdr ur(dr, σc) ≥ ur(σ∗
r , σc).
If σ∗
r is strictly dominated by some mixed strategy, this
linear program has a solution with objective value < 1.
(The dominating strategy is a feasible solution with 
objective value exactly 1. Because no constraint is binding for this
solution, we can reduce one of the probabilities slightly 
without affecting feasibility, thereby obtaining a solution with
objective value < 1.) Moreover, if this linear program has a
solution with objective value < 1, there is a mixed strategy
strictly dominating σ∗
r , which can be obtained by taking the
LP solution and adding the remaining probability to any
strategy (because all the utilities are positive, this will add
to the left side of any inequality, so all inequalities will 
become strict).
For weak dominance, we can solve the following linear
program:
maximize
σc∈Σc
((
dr∈Dr
pdr ur(dr, σc)) − ur(σ∗
r , σc))
such that
for any σc ∈ Σc,
dr∈Dr
pdr ur(dr, σc) ≥ ur(σ∗
r , σc);
dr∈Dr
pdr = 1.
If σ∗
r is weakly dominated by some mixed strategy, then
that mixed strategy is a feasible solution to this program
with objective value > 0, because for at least one strategy
σc ∈ Σc we have (
dr∈Dr
pdr ur(dr, σc)) − ur(σ∗
r , σc) > 0. On
the other hand, if this program has a solution with 
objective value > 0, then for at least one strategy σc ∈ Σc we
5
Recall that the assumption of a single opponent (that is,
the assumption of two players) is without loss of generality
for one-shot dominance.
must have (
dr∈Dr
pdr ur(dr, σc)) − ur(σ∗
r , σc) > 0, and thus
the linear program"s solution is a weakly dominating mixed
strategy.
4. ITERATED DOMINANCE
We now move on to iterated dominance. It is well-known
that iterated strict dominance is path-independent [6, 
19]that is, if we remove dominated strategies until no more
dominated strategies remain, in the end the remaining 
strategies for each player will be the same, regardless of the 
order in which strategies are removed. Because of this, to
see whether a given strategy can be eliminated by iterated
strict dominance, all that needs to be done is to 
repeatedly remove strategies that are strictly dominated, until no
more dominated strategies remain. Because we can check in
polynomial time whether any given strategy is dominated
(whether or not dominance by mixed strategies is allowed,
as described in Section 3), this whole procedure takes only
polynomial time. In the case of iterated dominance by pure
strategies with two players, Knuth et al. [11] slightly 
improve on (speed up) the straightforward implementation of
this procedure by keeping track of, for each ordered pair of
strategies for a player, the number of opponent strategies
that prevent the first strategy from dominating the second.
Hereby the runtime for an m × n game is reduced from
O((m + n)4
) to O((m + n)3
). (Actually, they only study
very weak dominance (for which no strict inequalities are
required), but the approach is easily extended.)
In contrast, iterated weak dominance is known to be 
pathdependent.6
For example, in the following game, using 
iterated weak dominance we can eliminate M first, and then
D, or R first, and then U.
L M R
U 1, 1 0, 0 1, 0
D 1, 1 1, 0 0, 0
Therefore, while the procedure of removing weakly 
dominated strategies until no more weakly dominated strategies
remain can certainly be executed in polynomial time, which
strategies survive in the end depends on the order in which
we remove the dominated strategies. We will investigate
two questions for iterated weak dominance: whether a given
strategy is eliminated in some path, and whether there is a
path to a unique solution (one pure strategy left per player).
We will show that both of these problems are 
computationally hard.
Definition 3. Given a game in normal form and a 
distinguished strategy σ∗
, IWD-STRATEGY-ELIMINATION
asks whether there is some path of iterated weak dominance
that eliminates σ∗
. Given a game in normal form, 
IWDUNIQUE-SOLUTION asks whether there is some path of
iterated weak dominance that leads to a unique solution (one
strategy left per player).
The following lemma shows a special case of normal form
games in which allowing for weak dominance by mixed 
strategies (in addition to weak dominance by pure strategies) does
6
There is, however, a restriction of weak dominance called
nice weak dominance which is path-independent [15, 16]. For
an overview of path-independence results, see Apt [1].
90
not help. We will prove the hardness results in this setting,
so that they will hold whether or not dominance by mixed
strategies is allowed.
Lemma 1. Suppose that all the utilities in a game are in
{0, 1}. Then every pure strategy that is weakly dominated by
a mixed strategy is also weakly dominated by a pure strategy.
Proof. Suppose pure strategy σ is weakly dominated by
mixed strategy σ∗
. If σ gets a utility of 1 against some
opponent strategy (or vector of opponent strategies if there
are more than 2 players), then all the pure strategies that
σ∗
places positive probability on must also get a utility of 1
against that opponent strategy (or else the expected utility
would be smaller than 1). Moreover, at least one of the
pure strategies that σ∗
places positive probability on must
get a utility of 1 against an opponent strategy that σ gets
0 against (or else the inequality would never be strict). It
follows that this pure strategy weakly dominates σ.
We are now ready to prove the main results of this section.
Theorem 1. IWD-STRATEGY-ELIMINATION is 
NPcomplete, even with 2 players, and with 0 and 1 being the
only utilities occurring in the matrix-whether or not 
dominance by mixed strategies is allowed.
Proof. The problem is in NP because given a sequence
of strategies to be eliminated, we can easily check whether
this is a valid sequence of eliminations (even when 
dominance by mixed strategies is allowed, using Proposition 1).
To show that the problem is NP-hard, we reduce an 
arbitrary satisfiability instance (given by a nonempty set of
clauses C over a nonempty set of variables V , with 
corresponding literals L = {+v : v ∈ V } ∪ {−v : v ∈ V }) to the
following IWD-STRATEGY-ELIMINATION instance. (In
this instance, we will specify that certain strategies are 
uneliminable. A strategy σr can be made uneliminable, even
when 0 and 1 are the only allowed utilities, by adding 
another strategy σr and another opponent strategy σc, so that:
1. σr and σr are the only strategies that give the row player
a utility of 1 against σc. 2. σr and σr always give the row
player the same utility. 3. σc is the only strategy that gives
the column player a utility of 1 against σr, but otherwise
σc always gives the column player utility 0. This makes it
impossible to eliminate any of these three strategies. We
will not explicitly specify the additional strategies to make
the proof more legible.)
In this proof, we will denote row player strategies by s, and
column player strategies by t, to improve legibility. Let the
row player"s pure strategy set be given as follows. For every
variable v ∈ V , the row player has corresponding strategies
s1
+v, s2
+v, s1
−v, s2
−v. Additionally, the row player has the 
following 2 strategies: s1
0 and s2
0, where s2
0 = σ∗
r (that is, it is
the strategy we seek to eliminate). Finally, for every clause
c ∈ C, the row player has corresponding strategies s1
c 
(uneliminable) and s2
c. Let the column player"s pure strategy set
be given as follows. For every variable v ∈ V , the column
player has a corresponding strategy tv. For every clause
c ∈ C, the column player has a corresponding strategy tc,
and additionally, for every literal l ∈ L that occurs in c, a
strategy tc,l. For every variable v ∈ V , the column player
has corresponding strategies t+v, t−v (both uneliminable).
Finally, the column player has three additional strategies:
t1
0 (uneliminable), t2
0, and t1.
The utility function for the row player is given as follows:
• ur(s1
+v, tv) = 0 for all v ∈ V ;
• ur(s2
+v, tv) = 1 for all v ∈ V ;
• ur(s1
−v, tv) = 1 for all v ∈ V ;
• ur(s2
−v, tv) = 0 for all v ∈ V ;
• ur(s1
+v, t1) = 1 for all v ∈ V ;
• ur(s2
+v, t1) = 0 for all v ∈ V ;
• ur(s1
−v, t1) = 0 for all v ∈ V ;
• ur(s2
−v, t1) = 1 for all v ∈ V ;
• ur(sb
+v, t+v) = 1 for all v ∈ V and b ∈ {1, 2};
• ur(sb
−v, t−v) = 1 for all v ∈ V and b ∈ {1, 2};
• ur(sl, t) = 0 otherwise for all l ∈ L and t ∈ S2;
• ur(s1
0, tc) = 0 for all c ∈ C;
• ur(s2
0, tc) = 1 for all c ∈ C;
• ur(sb
0, t1
0) = 1 for all b ∈ {1, 2};
• ur(s1
0, t2
0) = 1;
• ur(s2
0, t2
0) = 0;
• ur(sb
0, t) = 0 otherwise for all b ∈ {1, 2} and t ∈ S2;
• ur(sb
c, t) = 0 otherwise for all c ∈ C and b ∈ {1, 2};
and the row player"s utility is 0 in every other case. The
utility function for the column player is given as follows:
• uc(s, tv) = 0 for all v ∈ V and s ∈ S1;
• uc(s, t1) = 0 for all s ∈ S1;
• uc(s2
l , tc) = 1 for all c ∈ C and l ∈ L where l ∈ c
(literal l occurs in clause c);
• uc(s2
l2
, tc,l1 ) = 1 for all c ∈ C and l1, l2 ∈ L, l1 = l2
where l2 ∈ c;
• uc(s1
c, tc) = 1 for all c ∈ C;
• uc(s2
c, tc) = 0 for all c ∈ C;
• uc(sb
c, tc,l) = 1 for all c ∈ C, l ∈ L, and b ∈ {1, 2};
• uc(s2, tc) = uc(s2, tc,l) = 0 otherwise for all c ∈ C and
l ∈ L;
and the column player"s utility is 0 in every other case. We
now show that the two instances are equivalent.
First, suppose there is a solution to the satisfiability 
instance: that is, a truth-value assignment to the variables in
V such that all clauses are satisfied. Then, consider the 
following sequence of eliminations in our game: 1. For every
variable v that is set to true in the assignment, eliminate
tv (which gives the column player utility 0 everywhere). 2.
Then, for every variable v that is set to true in the 
assignment, eliminate s2
+v using s1
+v (which is possible because tv
has been eliminated, and because t1 has not been eliminated
(yet)). 3. Now eliminate t1 (which gives the column player
utility 0 everywhere). 4. Next, for every variable v that is set
to false in the assignment, eliminate s2
−v using s1
−v (which
is possible because t1 has been eliminated, and because tv
has not been eliminated (yet)). 5. For every clause c which
has the variable corresponding to one of its positive literals
l = +v set to true in the assignment, eliminate tc using tc,l
(which is possible because s2
l has been eliminated, and s2
c
has not been eliminated (yet)). 6. For every clause c which
has the variable corresponding to one of its negative literals
l = −v set to false in the assignment, eliminate tc using tc,l
91
(which is possible because s2
l has been eliminated, and s2
c has
not been eliminated (yet)). 7. Because the assignment 
satisfied the formula, all the tc have now been eliminated. Thus,
we can eliminate s2
0 = σ∗
r using s1
0. It follows that there is a
solution to the IWD-STRATEGY-ELIMINATION instance.
Now suppose there is a solution to the 
IWD-STRATEGYELIMINATION instance. By Lemma 1, we can assume that
all the dominances are by pure strategies. We first observe
that only s1
0 can eliminate s2
0 = σ∗
r , because it is the only
other strategy that gets the row player a utility of 1 against
t1
0, and t1
0 is uneliminable. However, because s2
0 performs
better than s1
0 against the tc strategies, it follows that all of
the tc strategies must be eliminated. For each c ∈ C, the
strategy tc can only be eliminated by one of the strategies tc,l
(with the same c), because these are the only other strategies
that get the column player a utility of 1 against s1
c, and s1
c is
uneliminable. But, in order for some tc,l to eliminate tc, s2
l
must be eliminated first. Only s1
l can eliminate s2
l , because
it is the only other strategy that gets the row player a utility
of 1 against tl, and tl is uneliminable. We next show that for
every v ∈ V only one of s2
+v, s2
−v can be eliminated. This
is because in order for s1
+v to eliminate s2
+v, tv needs to
have been eliminated and t1, not (so tv must be eliminated
before t1); but in order for s1
−v to eliminate s2
−v, t1 needs to
have been eliminated and tv, not (so t1 must be eliminated
before tv). So, set v to true if s2
+v is eliminated, and to false
otherwise Because by the above, for every clause c, one of
the s2
l with l ∈ c must be eliminated, it follows that this is
a satisfying assignment to the satisfiability instance.
Using Theorem 1, it is now (relatively) easy to show that
IWD-UNIQUE-SOLUTION is also NP-complete under the
same restrictions.
Theorem 2. IWD-UNIQUE-SOLUTION is NP-complete,
even with 2 players, and with 0 and 1 being the only 
utilities occurring in the matrix-whether or not dominance by
mixed strategies is allowed.
Proof. Again, the problem is in NP because we can 
nondeterministically choose the sequence of eliminations and
verify whether it is correct. To show NP-hardness, we reduce
an arbitrary IWD-STRATEGY-ELIMINATION instance to
the following IWD-UNIQUE-SOLUTION instance. Let all
the strategies for each player from the original instance 
remain part of the new instance, and let the utilities resulting
from the players playing a pair of these strategies be the
same. We add three additional strategies σ1
r , σ2
r , σ3
r for the
row player, and three additional strategies σ1
c , σ2
c , σ3
c for the
column player. Let the additional utilities be as follows:
• ur(σr, σj
c) = 1 for all σr /∈ {σ1
r , σ2
r , σ3
r } and j ∈ {2, 3};
• ur(σi
r, σc) = 1 for all i ∈ {1, 2, 3} and σc /∈ {σ2
c , σ3
c };
• ur(σi
r, σ2
c ) = 1 for all i ∈ {2, 3};
• ur(σ1
r , σ3
c ) = 1;
• and the row player"s utility is 0 in all other cases 
involving a new strategy.
• uc(σ3
r , σc) = 1 for all σc /∈ {σ1
c , σ2
c , σ3
c };
• uc(σ∗
r , σj
c) = 1 for all j ∈ {2, 3} (σ∗
r is the strategy to
be eliminated in the original instance);
• uc(σi
r, σ1
c ) = 1 for all i ∈ {1, 2};
• ur(σ1
r , σ2
c ) = 1;
• ur(σ2
r , σ3
c ) = 1;
• and the column player"s utility is 0 in all other cases
involving a new strategy.
We proceed to show that the two instances are equivalent.
First suppose there exists a solution to the original 
IWDSTRATEGY-ELIMINATION instance. Then, perform the
same sequence of eliminations to eliminate σ∗
r in the new
IWD-UNIQUE-SOLUTION instance. (This is possible 
because at any stage, any weak dominance for the row player
in the original instance is still a weak dominance in the new
instance, because the two strategies" utilities for the row
player are the same when the column player plays one of the
new strategies; and the same is true for the column player.)
Once σ∗
r is eliminated, let σ1
c eliminate σ2
c . (It performs
better against σ2
r .) Then, let σ1
r eliminate all the other 
remaining strategies for the row player. (It always performs
better against either σ1
c or σ3
c .) Finally, σ1
c is the unique best
response against σ1
r among the column player"s remaining
strategies, so let it eliminate all the other remaining 
strategies for the column player. Thus, there exists a solution to
the IWD-UNIQUE-SOLUTION instance.
Now suppose there exists a solution to the 
IWD-UNIQUESOLUTION instance. By Lemma 1, we can assume that all
the dominances are by pure strategies. We will show that
none of the new strategies (σ1
r , σ2
r , σ3
r , σ1
c , σ2
c , σ3
c ) can either
eliminate another strategy, or be eliminated before σ∗
r is
eliminated. Thus, there must be a sequence of eliminations
ending in the elimination of σ∗
r , which does not involve any of
the new strategies, and is therefore a valid sequence of 
eliminations in the original game (because all original strategies
perform the same against each new strategy). We now show
that this is true by exhausting all possibilities for the first
elimination before σ∗
r is eliminated that involves a new 
strategy. None of the σi
r can be eliminated by a σr /∈ {σ1
r , σ2
r , σ3
r },
because the σi
r perform better against σ1
c . σ1
r cannot 
eliminate any other strategy, because it always performs poorer
against σ2
c . σ2
r and σ3
r are equivalent from the row player"s
perspective (and thus cannot eliminate each other), and 
cannot eliminate any other strategy because they always 
perform poorer against σ3
c . None of the σj
c can be eliminated
by a σc /∈ {σ1
c , σ2
c , σ3
c }, because the σj
c always perform 
better against either σ1
r or σ2
r . σ1
c cannot eliminate any other
strategy, because it always performs poorer against either
σ∗
r or σ3
r . σ2
c cannot eliminate any other strategy, because
it always performs poorer against σ2
r or σ3
r . σ3
c cannot 
eliminate any other strategy, because it always performs poorer
against σ1
r or σ3
r . Thus, there exists a solution to the 
IWDSTRATEGY-ELIMINATION instance.
A slightly weaker version of the part of Theorem 2 
concerning dominance by pure strategies only is the main result
of Gilboa et al. [7]. (Besides not proving the result for 
dominance by mixed strategies, the original result was weaker 
because it required utilities {0, 1, 2, 3, 4, 5, 6, 7, 8} rather than
just {0, 1} (and because of this, our Lemma 1 cannot be
applied to it to get the result for mixed strategies).)
5. (ITERATED) DOMINANCE USING
MIXED STRATEGIES WITH SMALL
SUPPORTS
When showing that a strategy is dominated by a mixed
strategy, there are several reasons to prefer exhibiting a
92
dominating strategy that places positive probability on as
few pure strategies as possible. First, this will reduce the
number of bits required to specify the dominating 
strategy (and thus the proof of dominance can be communicated
quicker): if the dominating mixed strategy places positive
probability on only k strategies, then it can be specified 
using k real numbers for the probabilities, plus k log m (where
m is the number of strategies for the player under 
consideration) bits to indicate which strategies are used. Second,
the proof of dominance will be cleaner: for a dominating
mixed strategy, it is typically (always in the case of strict
dominance) possible to spread some of the probability onto
any unused pure strategy and still have a dominating 
strategy, but this obscures which pure strategies are the ones that
are key in making the mixed strategy dominating. Third,
because (by the previous) the argument for eliminating the
dominated strategy is simpler and easier to understand, it is
more likely to be accepted. Fourth, the level of risk 
neutrality required for the argument to work is reduced, at least in
the extreme case where dominance by a single pure strategy
can be exhibited (no risk neutrality is required here).
This motivates the following problem.
Definition 4 (MINIMUM-DOMINATING-SET). We
are given the row player"s utilities of a game in normal form,
a distinguished strategy σ∗
for the row player, a specification
of whether the dominance should be strict or weak, and a
number k. We are asked whether there exists a mixed 
strategy σ for the row player that places positive probability on
at most k pure strategies, and dominates σ∗
in the required
sense.
Unfortunately, this problem is NP-complete.
Theorem 3. MINIMUM-DOMINATING-SET is 
NPcomplete, both for strict and for weak dominance.
Proof. The problem is in NP because we can 
nondeterministically choose a set of at most k strategies to give
positive probability, and decide whether we can dominate
σ∗
with these k strategies as described in Proposition 1. To
show NP-hardness, we reduce an arbitrary SET-COVER 
instance (given a set S, subsets S1, S2, . . . , Sr, and a number
t, can all of S be covered by at most t of the subsets?)
to the following MINIMUM-DOMINATING-SET instance.
For every element s ∈ S, there is a pure strategy σs for
the column player. For every subset Si, there is a pure
strategy σSi for the row player. Finally, there is the 
distinguished pure strategy σ∗
for the row player. The row
player"s utilities are as follows: ur(σSi , σs) = t + 1 if s ∈ Si;
ur(σSi , σs) = 0 if s /∈ Si; ur(σ∗
, σs) = 1 for all s ∈ S. 
Finally, we let k = t. We now proceed to show that the two
instances are equivalent.
First suppose there exists a solution to the SET-COVER
instance. Without loss of generality, we can assume that
there are exactly k subsets in the cover. Then, for every
Si that is in the cover, let the dominating strategy σ place
exactly 1
k
probability on the corresponding pure strategy
σSi . Now, if we let n(s) be the number of subsets in the cover
containing s (we observe that that n(s) ≥ 1), then for every
strategy σs for the column player, the row player"s expected
utility for playing σ when the column player is playing σs is
u(σ, σs) = n(s)
k
(k + 1) ≥ k+1
k
> 1 = u(σ∗
, σs). So σ strictly
(and thus also weakly) dominates σ∗
, and there exists a
solution to the MINIMUM-DOMINATING-SET instance.
Now suppose there exists a solution to the 
MINIMUMDOMINATING-SET instance. Consider the (at most k)
pure strategies of the form σSi on which the dominating
mixed strategy σ places positive probability, and let T be
the collection of the corresponding subsets Si. We claim that
T is a cover. For suppose there is some s ∈ S that is not in
any of the subsets in T . Then, if the column player plays σs,
the row player (when playing σ) will always receive utility
0-as opposed to the utility of 1 the row player would receive
for playing σ∗
, contradicting the fact that σ dominates σ∗
(whether this dominance is weak or strict). It follows that
there exists a solution to the SET-COVER instance.
On the other hand, if we require that the dominating
strategy only places positive probability on a very small
number of pure strategies, then it once again becomes easy
to check whether a strategy is dominated. Specifically, to
find out whether player i"s strategy σ∗
is dominated by
a strategy that places positive probability on only k pure
strategies, we can simply check, for every subset of k of
player i"s pure strategies, whether there is a strategy that
places positive probability only on these k strategies and
dominates σ∗
, using Proposition 1. This requires only
O(|Σi|k
) such checks. Thus, if k is a constant, this 
constitutes a polynomial-time algorithm.
A natural question to ask next is whether iterated strict
dominance remains computationally easy when dominating
strategies are required to place positive probability on at
most k pure strategies, where k is a small constant. (We
have already shown in Section 4 that iterated weak 
dominance is hard even when k = 1, that is, only dominance by
pure strategies is allowed.) Of course, if iterated strict 
dominance were path-independent under this restriction, 
computational easiness would follow as it did in Section 4. 
However, it turns out that this is not the case.
Observation 1. If we restrict the dominating strategies
to place positive probability on at most two pure strategies,
iterated strict dominance becomes path-dependent.
Proof. Consider the following game:
7, 1 0, 0 0, 0
0, 0 7, 1 0, 0
3, 0 3, 0 0, 0
0, 0 0, 0 3, 1
1, 0 1, 0 1, 0
Let (i, j) denote the outcome in which the row player plays
the ith row and the column player plays the jth column.
Because (1, 1), (2, 2), and (4, 3) are all Nash equilibria, none
of the column player"s pure strategies will ever be eliminated,
and neither will rows 1, 2, and 4. We now observe that
randomizing uniformly over rows 1 and 2 dominates row 3,
and randomizing uniformly over rows 3 and 4 dominates row
5. However, if we eliminate row 3 first, it becomes impossible
to dominate row 5 without randomizing over at least 3 pure
strategies.
Indeed, iterated strict dominance turns out to be hard
even when k = 3.
Theorem 4. If we restrict the dominating strategies to
place positive probability on at most three pure strategies, it
becomes NP-complete to decide whether a given strategy can
be eliminated using iterated strict dominance.
93
Proof. The problem is in NP because given a sequence
of strategies to be eliminated, we can check in polynomial
time whether this is a valid sequence of eliminations (for any
strategy to be eliminated, we can check, for every subset of
three other strategies, whether there is a strategy placing
positive probability on only these three strategies that 
dominates the strategy to be eliminated, using Proposition 1).
To show that the problem is NP-hard, we reduce an 
arbitrary satisfiability instance (given by a nonempty set of
clauses C over a nonempty set of variables V , with 
corresponding literals L = {+v : v ∈ V } ∪ {−v : v ∈ V }) to the
following two-player game.
For every variable v ∈ V , the row player has strategies
s+v, s−v, s1
v, s2
v, s3
v, s4
v, and the column player has strategies
t1
v, t2
v, t3
v, t4
v. For every clause c ∈ C, the row player has a
strategy sc, and the column player has a strategy tc, as well
as, for every literal l occurring in c, an additional strategy
tl
c. The row player has two additional strategies s1 and s2.
(s2 is the strategy that we are seeking to eliminate.) Finally,
the column player has one additional strategy t1.
The utility function for the row player is given as follows
(where is some sufficiently small number):
• ur(s+v, tj
v) = 4 if j ∈ {1, 2}, for all v ∈ V ;
• ur(s+v, tj
v) = 1 if j ∈ {3, 4}, for all v ∈ V ;
• ur(s−v, tj
v) = 1 if j ∈ {1, 2}, for all v ∈ V ;
• ur(s−v, tj
v) = 4 if j ∈ {3, 4}, for all v ∈ V ;
• ur(s+v, t) = ur(s−v, t) = 0 for all v ∈ V and t /∈
{t1
v, t2
v, t3
v, t4
v};
• ur(si
v, ti
v) = 13 for all v ∈ V and i ∈ {1, 2, 3, 4};
• ur(si
v, t) = for all v ∈ V , i ∈ {1, 2, 3, 4}, and t = ti
v;
• ur(sc, tc) = 2 for all c ∈ C;
• ur(sc, t) = 0 for all c ∈ C and t = tc;
• ur(s1, t1) = 1 + ;
• ur(s1, t) = for all t = t1;
• ur(s2, t1) = 1;
• ur(s2, tc) = 1 for all c ∈ C;
• ur(s2, t) = 0 for all t /∈ {t1} ∪ {tc : c ∈ C}.
The utility function for the column player is given as 
follows:
• uc(si
v, ti
v) = 1 for all v ∈ V and i ∈ {1, 2, 3, 4};
• uc(s, ti
v) = 0 for all v ∈ V , i ∈ {1, 2, 3, 4}, and s = si
v;
• uc(sc, tc) = 1 for all c ∈ C;
• uc(sl, tc) = 1 for all c ∈ C and l ∈ L occurring in c;
• uc(s, tc) = 0 for all c ∈ C and s /∈ {sc} ∪ {sl : l ∈ c};
• uc(sc, tl
c) = 1 + for all c ∈ C;
• uc(sl , tl
c) = 1 + for all c ∈ C and l = l occurring in
c;
• uc(s, tl
c) = for all c ∈ C and s /∈ {sc} ∪ {sl : l ∈
c, l = l };
• uc(s2, t1) = 1;
• uc(s, t1) = 0 for all s = s2.
We now show that the two instances are equivalent. First,
suppose that there is a solution to the satisfiability instance.
Then, consider the following sequence of eliminations in our
game: 1. For every variable v that is set to true in the 
satisfying assignment, eliminate s+v with the mixed strategy σr
that places probability 1/3 on s−v, probability 1/3 on s1
v,
and probability 1/3 on s2
v. (The expected utility of 
playing σr against t1
v or t2
v is 14/3 > 4; against t3
v or t4
v, it is
4/3 > 1; and against anything else it is 2 /3 > 0. Hence the
dominance is valid.) 2. Similarly, for every variable v that
is set to false in the satisfying assignment, eliminate s−v
with the mixed strategy σr that places probability 1/3 on
s+v, probability 1/3 on s3
v, and probability 1/3 on s4
v. (The
expected utility of playing σr against t1
v or t2
v is 4/3 > 1;
against t3
v or t4
v, it is 14/3 > 4; and against anything else it
is 2 /3 > 0. Hence the dominance is valid.) 3. For every
c ∈ C, eliminate tc with any tl
c for which l was set to true
in the satisfying assignment. (This is a valid dominance 
because tl
c performs better than tc against any strategy other
than sl, and we eliminated sl in step 1 or in step 2.) 4.
Finally, eliminate s2 with s1. (This is a valid dominance 
because s1 performs better than s2 against any strategy other
than those in {tc : c ∈ C}, which we eliminated in step 3.)
Hence, there is an elimination path that eliminates s2.
Now, suppose that there is an elimination path that 
eliminates s2. The strategy that eventually dominates s2 must
place most of its probability on s1, because s1 is the only
other strategy that performs well against t1, which cannot
be eliminated before s2. But, s1 performs significantly worse
than s2 against any strategy tc with c ∈ C, so it follows that
all these strategies must be eliminated first. Each strategy
tc can only be eliminated by a strategy that places most
of its weight on the corresponding strategies tl
c with l ∈ c,
because they are the only other strategies that perform well
against sc, which cannot be eliminated before tc. But, each
strategy tl
c performs significantly worse than tc against sl,
so it follows that for every clause c, for one of the literals
l occurring in it, sl must be eliminated first. Now, 
strategies of the form tj
v will never be eliminated because they are
the unique best responses to the corresponding strategies sj
v
(which are, in turn, the best responses to the corresponding
tj
v). As a result, if strategy s+v (respectively, s−v) is 
eliminated, then its opposite strategy s−v (respectively, s+v) can
no longer be eliminated, for the following reason. There is no
other pure strategy remaining that gets a significant utility
against more than one of the strategies t1
v, t2
v, t3
v, t4
v, but s−v
(respectively, s+v) gets significant utility against all 4, and
therefore cannot be dominated by a mixed strategy placing
positive probability on at most 3 strategies. It follows that
for each v ∈ V , at most one of the strategies s+v, s−v is
eliminated, in such a way that for every clause c, for one
of the literals l occurring in it, sl must be eliminated. But
then setting all the literals l such that sl is eliminated to
true constitutes a solution to the satisfiability instance.
In the next section, we return to the setting where there
is no restriction on the number of pure strategies on which
a dominating mixed strategy can place positive probability.
6. (ITERATED) DOMINANCE IN
BAYESIAN GAMES
So far, we have focused on normal form games that are
flatly represented (that is, every matrix entry is given 
ex94
plicitly). However, for many games, the flat representation
is too large to write down explicitly, and instead, some 
representation that exploits the structure of the game needs to
be used. Bayesian games, besides being of interest in their
own right, can be thought of as a useful structured 
representation of normal form games, and we will study them in
this section.
In a Bayesian game, each player first receives privately
held preference information (the player"s type) from a 
distribution, which determines the utility that that player receives
for every outcome of (that is, vector of actions played in) the
game. After receiving this type, the player plays an action
based on it.7
Definition 5. A Bayesian game is given by a set of 
players {1, 2, . . . , n}; and, for each player i, a (finite) set of
actions Ai, a (finite) type space Θi with a probability 
distribution πi over it, and a utility function ui : Θi × A1 × A2 ×
. . . × An → R (where ui(θi, a1, a2, . . . , an) denotes player
i"s utility when i"s type is θi and each player j plays action
aj). A pure strategy in a Bayesian game is a mapping from
types to actions, σi : Θi → Ai, where σi(θi) denotes the
action that player i plays for type θi.
Any vector of pure strategies in a Bayesian game defines
an (expected) utility for each player, and therefore we can
translate a Bayesian game into a normal form game. In this
normal form game, the notions of dominance and iterated
dominance are defined as before. However, the normal form
representation of the game is exponentially larger than the
Bayesian representation, because each player i has |Ai||Θi|
distinct pure strategies. Thus, any algorithm for Bayesian
games that relies on expanding the game to its normal form
will require exponential time. Specifically, our easiness 
results for normal form games do not directly transfer to this
setting. In fact, it turns out that checking whether a 
strategy is dominated by a pure strategy is hard in Bayesian
games.
Theorem 5. In a Bayesian game, it is NP-complete to
decide whether a given pure strategy σr : Θr → Ar is 
dominated by some other pure strategy (both for strict and weak
dominance), even when the row player"s distribution over
types is uniform.
Proof. The problem is in NP because it is easy to verify
whether a candidate dominating strategy is indeed a 
dominating strategy. To show that the problem is NP-hard, we
reduce an arbitrary satisfiability instance (given by a set of
clauses C using variables from V ) to the following Bayesian
game. Let the row player"s action set be Ar = {t, f, 0} and
let the column player"s action set be Ac = {ac : c ∈ C}.
Let the row player"s type set be Θr = {θv : v ∈ V }, with a
distribution πr that is uniform. Let the row player"s utility
function be as follows:
• ur(θv, 0, ac) = 0 for all v ∈ V and c ∈ C;
• ur(θv, b, ac) = |V | for all v ∈ V , c ∈ C, and b ∈ {t, f}
such that setting v to b satisfies c;
• ur(θv, b, ac) = −1 for all v ∈ V , c ∈ C, and b ∈ {t, f}
such that setting v to b does not satisfy c.
7
In general, a player can also receive a signal about the other
players" preferences, but we will not concern ourselves with
that here.
Let the pure strategy to be dominated be the one that
plays 0 for every type. We show that the strategy is 
dominated by a pure strategy if and only if there is a solution to
the satisfiability instance.
First, suppose there is a solution to the satisfiability 
instance. Then, let σd
r be given by: σd
r (θv) = t if v is set
to true in the solution to the satisfiability instance, and
σd
r (θv) = f otherwise. Then, against any action ac by the
column player, there is at least one type θv such that either
+v ∈ c and σd
r (θv) = t, or −v ∈ c and σd
r (θv) = f. Thus,
the row player"s expected utility against action ac is at least
|V |
|V |
− |V |−1
|V |
= 1
|V |
> 0. So, σd
r is a dominating strategy.
Now, suppose there is a dominating pure strategy σd
r .
This dominating strategy must play t or f for at least one
type. Thus, against any ac by the column player, there must
at least be some type θv for which ur(θv, σd
r (θv), ac) > 0.
That is, there must be at least one variable v such that 
setting v to σd
r (θv) satifies c. But then, setting each v to σd
r (θv)
must satisfy all the clauses. So a satisfying assignment 
exists.
However, it turns out that we can modify the linear 
programs from Proposition 1 to obtain a polynomial time 
algorithm for checking whether a strategy is dominated by a
mixed strategy in Bayesian games.
Theorem 6. In a Bayesian game, it can be decided in
polynomial time whether a given (possibly mixed) strategy
σr is dominated by some other mixed strategy, using linear
programming (both for strict and weak dominance).
Proof. We can modify the linear programs presented in
Proposition 1 as follows. For strict dominance, again 
assuming without loss of generality that all the utilities in
the game are positive, use the following linear program (in
which pσr
r (θr, ar) is the probability that σr, the strategy to
be dominated, places on ar for type θr):
minimize
θr∈Θr ar∈Ar
pr(ar)
such that
for any ac ∈ Ac,
θr∈Θr ar∈Ar
π(θr)ur(θr, ar, ac)pr(θr, ar) ≥
θr∈Θr ar∈Ar
π(θr)ur(θr, ar, ac)pσr
r (θr, ar);
for any θr ∈ Θr,
ar∈Ar
pr(θr, ar) ≤ 1.
Assuming that π(θr) > 0 for all θr ∈ Θr, this program
will return an objective value smaller than |Θr| if and only
if σr is strictly dominated, by reasoning similar to that done
in Proposition 1.
For weak dominance, use the following linear program:
maximize
ac∈Ac
(
θr∈Θr ar∈Ar
π(θr)ur(θr, ar, ac)pr(θr, ar)−
θr∈Θr ar∈Ar
π(θr)ur(θr, ar, ac)pσr
r (θr, ar))
such that
for any ac ∈ Ac,
θr∈Θr ar∈Ar
π(θr)ur(θr, ar, ac)pr(θr, ar) ≥
θr∈Θr ar∈Ar
π(θr)ur(θr, ar, ac)pσr
r (θr, ar);
for any θr ∈ Θr,
ar∈Ar
pr(θr, ar) = 1.
This program will return an objective value greater than
0 if and only if σr is weakly dominated, by reasoning similar
to that done in Proposition 1.
We now turn to iterated dominance in Bayesian games.
Na¨ıvely, one might argue that iterated dominance in Bayesian
95
games always requires an exponential number of steps when
a significant fraction of the game"s pure strategies can be
eliminated, because there are exponentially many pure 
strategies. However, this is not a very strong argument because
oftentimes we can eliminate exponentially many pure 
strategies in one step. For example, if for some type θr ∈ Θr we
have, for all ac ∈ Ac, that u(θr, a1
r, ac) > u(θr, a2
r, ac), then
any pure strategy for the row player which plays action a2
r
for type θr is dominated (by the strategy that plays 
action a1
r for type θr instead)-and there are exponentially
many (|Ar||Θr|−1
) such strategies. It is therefore 
conceivable that we need only polynomially many eliminations of
collections of a player"s strategies. However, the following
theorem shows that this is not the case, by giving an 
example where an exponential number of iterations (that is,
alternations between the players in eliminating strategies)
is required. (We emphasize that this is not a result about
computational complexity.)
Theorem 7. Even in symmetric 3-player Bayesian games,
iterated dominance by pure strategies can require an 
exponential number of iterations (both for strict and weak 
dominance), even with only three actions per player.
Proof. Let each player i ∈ {1, 2, 3} have n + 1 types
θ1
i , θ2
i , . . . , θn+1
i . Let each player i have 3 actions ai, bi, ci,
and let the utility function of each player be defined as 
follows. (In the below, i + 1 and i + 2 are shorthand for
i + 1(mod 3) and i + 2(mod 3) when used as player indices.
Also, −∞ can be replaced by a sufficiently negative 
number. Finally, δ and should be chosen to be very small (even
compared to 2−(n+1)
), and should be more than twice as
large as δ.)
• ui(θ1
i ; ai, ci+1, ci+2) = −1;
• ui(θ1
i ; ai, si+1, si+2) = 0 for si+1 = ci+1 or si+2 = ci+2;
• ui(θ1
i ; bi, si+1, si+2) = − for si+1 = ai+1 and si+2 =
ai+2;
• ui(θ1
i ; bi, si+1, si+2) = −∞ for si+1 = ai+1 or si+2 =
ai+2;
• ui(θ1
i ; ci, si+1, si+2) = −∞ for all si+1, si+2;
• ui(θj
i ; ai, si+1, si+2) = −∞ for all si+1, si+2 when j >
1;
• ui(θj
i ; bi, si+1, si+2) = − for all si+1, si+2 when j > 1;
• ui(θj
i ; ci, si+1, ci+2) = δ − − 1/2 for all si+1 when
j > 1;
• ui(θj
i ; ci, si+1, si+2) = δ− for all si+1 and si+2 = ci+2
when j > 1.
Let the distribution over each player"s types be given by
p(θj
i ) = 2−j
(with the exception that p(θ2
i ) = 2−2
+2−(n+1)
).
We will be interested in eliminating strategies of the 
following form: play bi for type θ1
i , and play one of bi or ci
otherwise. Because the utility function is the same for any
type θj
i with j > 1, these strategies are effectively defined
by the total probability that they place on ci,8
which is
t2
i (2−2
+ 2−(n+1)
) + n+1
j=3 tj
i 2−j
where tj
i = 1 if player i
8
Note that the strategies are still pure strategies; the 
probability placed on an action by a strategy here is simply the
sum of the probabilities of the types for which the strategy
chooses that action.
plays ci for type θj
i , and 0 otherwise. This probability is
different for any two different strategies of the given form,
and we have exponentially many different strategies of the
given form. For any probability q which can be expressed
as t2(2−2
+ 2−(n+1)
) + n+1
j=3 tj2−j
(with all tj ∈ {0, 1}),
let σi(q) denote the (unique) strategy of the given form for
player i which places a total probability of q on ci. Any
strategy that plays ci for type θ1
i or ai for some type θj
i
with j > 1 can immediately be eliminated. We will show
that, after that, we must eliminate the strategies σi(q) with
high q first, slowly working down to those with lower q.
Claim 1: If σi+1(q ) and σi+2(q ) have not yet been 
eliminated, and q < q , then σi(q) cannot yet be eliminated.
Proof: First, we show that no strategy σi(q ) can 
eliminate σi(q). Against σi+1(q ), σi+2(q ), the utility of 
playing σi(p) is − + p · δ − p · q /2. Thus, when q = 0, it is
best to set p as high as possible (and we note that σi+1(0)
and σi+2(0) have not been eliminated), but when q > 0, it
is best to set p as low as possible because δ < q /2. Thus,
whether q > q or q < q , σi(q) will always do strictly
better than σi(q ) against some remaining opponent 
strategies. Hence, no strategy σi(q ) can eliminate σi(q). The
only other pure strategies that could dominate σi(q) are
strategies that play ai for type θ1
i , and bi or ci for all other
types. Let us take such a strategy and suppose that it plays
c with probability p. Against σi+1(q ), σi+2(q ) (which have
not yet been eliminated), the utility of playing this 
strategy is −(q )2
/2 − /2 + p · δ − p · q /2. On the other hand,
playing σi(q) gives − + q · δ − q · q /2. Because q > q, we
have −(q )2
/2 < −q · q /2, and because δ and are small,
it follows that σi(q) receives a higher utility. Therefore, no
strategy dominates σi(q), proving the claim.
Claim 2: If for all q > q, σi+1(q ) and σi+2(q ) have been
eliminated, then σi(q) can be eliminated. Proof: Consider
the strategy for player i that plays ai for type θ1
i , and bi for
all other types (call this strategy σi); we claim σi dominates
σi(q). First, if either of the other players k plays ak for θ1
k,
then σi performs better than σi(q) (which receives −∞ in
some cases). Because the strategies for player k that play
ck for type θ1
k, or ak for some type θj
k with j > 1, have
already been eliminated, all that remains to check is that σi
performs better than σi(q) whenever both of the other two
players play strategies of the following form: play bk for type
θ1
k, and play one of bk or ck otherwise. We note that among
these strategies, there are none left that place probability
greater than q on ck. Letting qk denote the probability with
which player k plays ck, the expected utility of playing σi
is −qi+1 · qi+2/2 − /2. On the other hand, the utility of
playing σi(q) is − + q · δ − q · qi+2/2. Because qi+1 ≤ q, the
difference between these two expressions is at least /2 − δ,
which is positive. It follows that σi dominates σi(q).
From Claim 2, it follows that all strategies of the form
σi(q) will eventually be eliminated. However, Claim 1 shows
that we cannot go ahead and eliminate multiple such 
strategies for one player, unless at least one other player 
simultaneously keeps up in the eliminated strategies: every time
a σi(q) is eliminated such that σi+1(q) and σi+2(q) have
not yet been eliminated, we need to eliminate one of the
latter two strategies before any σi(q ) with q > q can be
eliminated-that is, we need to alternate between players.
Because there are exponentially many strategies of the form
σi(q), it follows that iterated elimination will require 
exponentially many iterations to complete.
96
It follows that an efficient algorithm for iterated 
dominance (strict or weak) by pure strategies in Bayesian games,
if it exists, must somehow be able to perform (at least part
of) many iterations in a single step of the algorithm (because
if each step only performed a single iteration, we would need
exponentially many steps). Interestingly, Knuth et al. [11]
argue that iterated dominance appears to be an inherently
sequential problem (in light of their result that iterated very
weak dominance is P-complete, that is, apparently not 
efficiently parallelizable), suggesting that aggregating many
iterations may be difficult.
7. CONCLUSIONS
While the Nash equilibrium solution concept is studied
more and more intensely in our community, the perhaps
more elementary concept of (iterated) dominance has 
received much less attention. In this paper we studied various
computational aspects of this concept.
We first studied both strict and weak dominance (not 
iterated), and showed that checking whether a given strategy
is dominated by some mixed strategy can be done in 
polynomial time using a single linear program solve. We then
moved on to iterated dominance. We showed that 
determining whether there is some path that eliminates a given 
strategy is NP-complete with iterated weak dominance. This 
allowed us to also show that determining whether there is a
path that leads to a unique solution is NP-complete. Both
of these results hold both with and without dominance by
mixed strategies. (A weaker version of the second result
(only without dominance by mixed strategies) was already
known [7].) Iterated strict dominance, on the other hand,
is path-independent (both with and without dominance by
mixed strategies) and can therefore be done in polynomial
time.
We then studied what happens when the dominating 
strategy is allowed to place positive probability on only a few pure
strategies. First, we showed that finding the dominating
strategy with minimum support size is NP-complete (both
for strict and weak dominance). Then, we showed that 
iterated strict dominance becomes path-dependent when there
is a limit on the support size of the dominating strategies,
and that deciding whether a given strategy can be 
eliminated by iterated strict dominance under this restriction is
NP-complete (even when the limit on the support size is 3).
Finally, we studied dominance and iterated dominance in
Bayesian games, as an example of a concise representation
language for normal form games that is interesting in its own
right. We showed that, unlike in normal form games, 
deciding whether a given pure strategy is dominated by another
pure strategy in a Bayesian game is NP-complete (both with
strict and weak dominance); however, deciding whether a
strategy is dominated by some mixed strategy can still be
done in polynomial time with a single linear program solve
(both with strict and weak dominance). Finally, we showed
that iterated dominance using pure strategies can require an
exponential number of iterations in a Bayesian game (both
with strict and weak dominance).
There are various avenues for future research. First, there
is the open question of whether it is possible to complete
iterated dominance in Bayesian games in polynomial time
(even though we showed that an exponential number of 
alternations between the players in eliminating strategies is
sometimes required). Second, we can study computational
aspects of (iterated) dominance in concise representations
of normal form games other than Bayesian games-for 
example, in graphical games [9] or local-effect/action graph
games [12, 2]. (How to efficiently perform iterated very weak
dominance has already been studied for partially observable
stochastic games [8].) Finally, we can ask whether some of
the algorithms we described (such as the one for iterated
strict dominance with mixed strategies) can be made faster.
8. REFERENCES
[1] Krzysztof R. Apt. Uniform proofs of order independence for
various strategy elimination procedures. Contributions to
Theoretical Economics, 4(1), 2004.
[2] Nivan A. R. Bhat and Kevin Leyton-Brown. Computing
Nash equilibria of action-graph games. In UAI, 2004.
[3] Ben Blum, Christian R. Shelton, and Daphne Koller. A
continuation method for Nash equilibria in structured
games. In IJCAI, 2003.
[4] Vincent Conitzer and Tuomas Sandholm. Complexity
results about Nash equilibria. In IJCAI, pages 765-771,
2003.
[5] Drew Fudenberg and Jean Tirole. Game Theory. MIT
Press, 1991.
[6] Itzhak Gilboa, Ehud Kalai, and Eitan Zemel. On the order
of eliminating dominated strategies. Operations Research
Letters, 9:85-89, 1990.
[7] Itzhak Gilboa, Ehud Kalai, and Eitan Zemel. The
complexity of eliminating dominated strategies.
Mathematics of Operation Research, 18:553-565, 1993.
[8] Eric A. Hansen, Daniel S. Bernstein, and Shlomo
Zilberstein. Dynamic programming for partially observable
stochastic games. In AAAI, pages 709-715, 2004.
[9] Michael Kearns, Michael Littman, and Satinder Singh.
Graphical models for game theory. In UAI, 2001.
[10] Leonid Khachiyan. A polynomial algorithm in linear
programming. Soviet Math. Doklady, 20:191-194, 1979.
[11] Donald E. Knuth, Christos H. Papadimitriou, and John N
Tsitsiklis. A note on strategy elimination in bimatrix
games. Operations Research Letters, 7(3):103-107, 1988.
[12] Kevin Leyton-Brown and Moshe Tennenholtz. Local-effect
games. In IJCAI, 2003.
[13] Richard Lipton, Evangelos Markakis, and Aranyak Mehta.
Playing large games using simple strategies. In ACM-EC,
pages 36-41, 2003.
[14] Michael Littman and Peter Stone. A polynomial-time Nash
equilibrium algorithm for repeated games. In ACM-EC,
pages 48-54, 2003.
[15] Leslie M. Marx and Jeroen M. Swinkels. Order
independence for iterated weak dominance. Games and
Economic Behavior, 18:219-245, 1997.
[16] Leslie M. Marx and Jeroen M. Swinkels. Corrigendum,
order independence for iterated weak dominance. Games
and Economic Behavior, 31:324-329, 2000.
[17] Andreu Mas-Colell, Michael Whinston, and Jerry R. Green.
Microeconomic Theory. Oxford University Press, 1995.
[18] Roger Myerson. Game Theory: Analysis of Conflict.
Harvard University Press, Cambridge, 1991.
[19] Martin J Osborne and Ariel Rubinstein. A Course in
Game Theory. MIT Press, 1994.
[20] Christos Papadimitriou. Algorithms, games and the
Internet. In STOC, pages 749-753, 2001.
[21] Ryan Porter, Eugene Nudelman, and Yoav Shoham. Simple
search methods for finding a Nash equilibrium. In AAAI,
pages 664-669, 2004.
97
